name: Application workflow

on:
  push:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch
  pull_request:
    branches:
      - "*" # matches every branch that doesn't contain a '/'
      - "*/*" # matches every branch containing a single '/'
      - "**" # matches every branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10" # Replace with the desired Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  test:
    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Set up python3
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      
      # Install dependecies
      - name: Install dependecies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f python3/requirements.txt ]; then pip install -r python3/requirements.txt; fi
  
      #Pytest
      - name: Test with pytest
        run: |
            RUN_ENV=dev 
            coverage run -m pytest python3/test/
            coverage report
            coverage html -d cc_report/

  package:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Package source code
        run: |
          zip -r lambda_package.zip .

  dockerize:
    runs-on: ubuntu-latest
    needs: package

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your desired AWS region

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: public.ecr.aws/s2p2n5l7/ghwf # Replace with your ECR registry URL

      - name: Build and tag Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          tags: public.ecr.aws/s2p2n5l7/ghwf:latest # Replace with your ECR registry URL and desired image tag

      - name: Save Docker image artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-image
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: dockerize

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your desired AWS region

      - name: Configure Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Retrieve Docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: docker-image

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry: public.ecr.aws/s2p2n5l7/ghwf # Replace with your ECR registry URL

      - name: Deploy image to AWS Lambda
        run: |
          docker tag your-ecr-registry:latest your-ecr-registry:tag  # Replace with your ECR registry URL and desired image tag
          docker push your-ecr-registry:tag  # Replace with your ECR registry URL and desired image tag

  run:
    runs-on: ubuntu-latest
    needs: deploy

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Replace with your desired AWS region

      - name: Create or update Lambda function
        run: |
          aws lambda create-function \
          --function-name my-lambda-function \
          --runtime python3.8 \
          --role arn:aws:iam::1234567890:role/my-lambda-role \
          --handler my_lambda_function.handler \
          --zip-file fileb://lambda_package.zip

      - name: Get Lambda function URL
        id: get_lambda_url
        run: |
          function_name=my-lambda-function  # Replace with your Lambda function name
          function_arn=$(aws lambda get-function --function-name $function_name --query 'Configuration.FunctionArn' --output text)
          echo "::set-output name=lambda_url::https://console.aws.amazon.com/lambda/home?region=us-east-1#/functions/${function_arn##*/}/versions/latest"

      - name: Print Lambda function URL
        run: |
          echo "Lambda function URL: ${{ steps.get_lambda_url.outputs.lambda_url }}"
